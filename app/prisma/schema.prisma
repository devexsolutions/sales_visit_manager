generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/sales_visit_manager/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  password      String?
  role          UserRole  @default(SALES_REP)
  territory     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  customers     Customer[]
  offers        Offer[]
  visits        Visit[]
  callPlans     CallPlan[]
  routes        Route[]
  appointments  Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id                String         @id @default(cuid())
  customerName      String
  mainContact       String?
  contactEmail      String?
  contactPhone      String?
  customerSegment   CustomerSegment @default(SME)
  customerStatus    CustomerStatus @default(POTENTIAL)
  salesHistory      Float?         @default(0)
  potentialGrowth   Float?         @default(0)
  lastVisit         DateTime?
  lastPurchase      DateTime?
  activeOfferings   String?
  mainCompetitor    String?
  location          String?
  latitude          Float?
  longitude         Float?
  commercialNotes   String?
  priority          Int?           @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  assignedUserId    String
  assignedUser      User           @relation(fields: [assignedUserId], references: [id])
  offers            Offer[]
  visits            Visit[]
  callPlans         CallPlan[]
  appointments      Appointment[]
}

model Offer {
  id              String      @id @default(cuid())
  offerName       String
  customerName    String
  amount          Float
  currency        String      @default("CHF")
  status          OfferStatus @default(DRAFT)
  probability     Int         @default(50)
  expectedClose   DateTime?
  description     String?
  nextAction      String?
  lastContact     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  assignedUserId  String
  assignedUser    User        @relation(fields: [assignedUserId], references: [id])
  visits          Visit[]
}

model Visit {
  id              String      @id @default(cuid())
  visitType       VisitType   @default(SALES_CALL)
  status          VisitStatus @default(PLANNED)
  scheduledDate   DateTime
  actualDate      DateTime?
  duration        Int?
  location        String?
  objective       String?
  notes           String?
  outcome         String?
  nextSteps       String?
  satisfaction    Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  assignedUserId  String
  assignedUser    User        @relation(fields: [assignedUserId], references: [id])
  offerId         String?
  offer           Offer?      @relation(fields: [offerId], references: [id])
  routeId         String?
  route           Route?      @relation(fields: [routeId], references: [id])
}

model CallPlan {
  id              String      @id @default(cuid())
  planDate        DateTime
  callType        CallType    @default(APPOINTMENT)
  priority        Int         @default(1)
  objective       String
  expectedDuration Int?
  status          CallStatus  @default(PENDING)
  notes           String?
  outcome         String?
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  assignedUserId  String
  assignedUser    User        @relation(fields: [assignedUserId], references: [id])
}

model Route {
  id              String      @id @default(cuid())
  routeName       String
  routeDate       DateTime
  startLocation   String?
  endLocation     String?
  totalDistance   Float?
  estimatedTime   Int?
  status          RouteStatus @default(PLANNED)
  optimized       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  assignedUserId  String
  assignedUser    User        @relation(fields: [assignedUserId], references: [id])
  visits          Visit[]
}

enum UserRole {
  SALES_REP
  MANAGER
  ADMIN
}

enum CustomerSegment {
  SME
  LARGE_ENTERPRISE
  B2B
  B2C
}

enum CustomerStatus {
  ACTIVE
  POTENTIAL
  INACTIVE
  LEAD
}

enum OfferStatus {
  DRAFT
  SENT
  NEGOTIATION
  WON
  LOST
  EXPIRED
}

enum VisitType {
  SALES_CALL
  FOLLOW_UP
  DEMO
  NEGOTIATION
  CONTRACT_SIGNING
  RELATIONSHIP
}

enum VisitStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum CallType {
  APPOINTMENT
  FOLLOW_UP
  CHECK_IN
  SUPPORT
}

enum CallStatus {
  PENDING
  COMPLETED
  CANCELLED
  NO_ANSWER
  RESCHEDULED
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Appointment {
  id              String            @id @default(cuid())
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  location        String?
  isAllDay        Boolean           @default(false)
  type            AppointmentType   @default(MEETING)
  status          AppointmentStatus @default(SCHEDULED)
  priority        AppointmentPriority @default(MEDIUM)
  reminderMinutes Int?              @default(15)
  isRecurring     Boolean           @default(false)
  recurrenceRule  String?           // RRULE format for recurring appointments
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  assignedUserId  String
  assignedUser    User              @relation(fields: [assignedUserId], references: [id])
  customerId      String?
  customer        Customer?         @relation(fields: [customerId], references: [id])
  attendees       AppointmentAttendee[]
}

model AppointmentAttendee {
  id             String         @id @default(cuid())
  name           String
  email          String?
  phone          String?
  status         AttendeeStatus @default(INVITED)
  isOptional     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  
  appointmentId  String
  appointment    Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  @@unique([appointmentId, email])
}

enum AppointmentType {
  MEETING
  CALL
  PRESENTATION
  TRAINING
  CONFERENCE
  CLIENT_VISIT
  INTERNAL
  PERSONAL
  HOLIDAY
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
  NO_SHOW
}

enum AppointmentPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AttendeeStatus {
  INVITED
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE
}
